import {
  binary-builder.move.extract,
  binary-builder.move.make-builder,
  binary-builder.rule.builder,
  core.text {_Text},
}

data builder {
| _Builder(binary-builder.rule.builder.builder)
}

inline _to-binary-builder(b: builder): binary-builder.rule.builder.builder {
  let _Builder(b) = b in
  b
}

inline _to-binary-builder-N(b: &builder): &binary-builder.rule.builder.builder {
  tie _Builder(b) = b in
  b
}

define make-builder(size: int): builder {
  _Builder(binary-builder.move.make-builder.make-builder(size))
}

define extract(b: builder): text {
  _Text(binary-builder.move.extract.extract(_to-binary-builder(b)))
}
